package uk.gov.moj.cpp.stagingdvla.query.view.response;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class MockResponseUtils {

    private MockResponseUtils() {

    }

    public static DriverResponse getEmptyDriverRecord() {
        return new DriverResponse.Builder().build();
    }

    public static DriverResponse getDriverRecordWithMandatoryFields() {
        return new DriverResponse.Builder()
                .driver(new Driver.Builder()
                        .drivingLicenceNumber("MINIM753116SM9IJ")
                        .firstNames("Billy")
                        .lastName("Smith")
                        .gender("male")
                        .dateOfBirth(LocalDate.of(1990, 6, 3))
                        .address(new Address.Builder().unstructuredAddress(new UnstructuredAddress.Builder()
                                .line1("12 London Road")
                                .line2("Twford")
                                .postcode("RG10 9EL").build()).build())
                        .build())
                .endorsements(Stream.of(
                        new Endorsement.Builder()
                                .convictionDate(LocalDate.of(2019, 4, 23))
                                .convictionCourtCode("convictionCourtCode1")
                                .disqualifiedPendingSentence("Disqualified Pending Sentence")
                                .offenceCode("AB10")
                                .offenceLegalLiteral("Mock offence 1")
                                .offenceDate(LocalDate.of(2019, 9, 18))
                                .build(),
                        new Endorsement.Builder()
                                .convictionDate(LocalDate.of(2005, 10, 1))
                                .convictionCourtCode("2355")
                                .appealCourtCode("2355")
                                .fine(BigDecimal.valueOf(440))
                                .offenceCode("SP30")
                                .offenceLegalLiteral("Offence Legal Lit")
                                .offenceDate(LocalDate.of(2004, 9, 16))
                                .penaltyPoints(22)
                                .sentenceDate(LocalDate.of(2006, 4, 1))
                                .sentencingCourtCode("3322")
                                .build(),
                        new Endorsement.Builder()
                                .convictionDate(LocalDate.of(2019, 3, 19))
                                .convictionCourtCode("1200")
                                .appealCourtCode("2355")
                                .fine(BigDecimal.valueOf(300))
                                .offenceCode("CU10")
                                .offenceLegalLiteral("Mock offence 3")
                                .offenceDate(LocalDate.of(2019, 2, 5))
                                .penaltyPoints(3)
                                .sentenceDate(LocalDate.of(2019, 3, 10))
                                .sentencingCourtCode("2819")
                                .build(),
                        new Endorsement.Builder()
                                .convictionDate(LocalDate.of(2019, 11, 5))
                                .convictionCourtCode("3273")
                                .appealCourtCode("8549")
                                .fine(BigDecimal.valueOf(500))
                                .offenceCode("LC20")
                                .offenceLegalLiteral("Mock offence 4")
                                .offenceDate(LocalDate.of(2017, 4, 27))
                                .penaltyPoints(1)
                                .sentenceDate(LocalDate.of(2017, 9, 12))
                                .sentencingCourtCode("2748")
                                .build(),
                        new Endorsement.Builder()
                                .convictionDate(LocalDate.of(2019, 4, 5))
                                .convictionCourtCode("2345")
                                .appealCourtCode("8549")
                                .fine(BigDecimal.valueOf(5000))
                                .offenceCode("GD18")
                                .offenceLegalLiteral("Mock offence 5")
                                .offenceDate(LocalDate.of(2016, 2, 18))
                                .penaltyPoints(1)
                                .sentenceDate(LocalDate.of(2016, 6, 3))
                                .disqualifiedPendingSentence("Disqualified from Conviction")
                                .intoxicant(new Intoxicant.Builder()
                                        .intoxicantType("Alcohol")
                                        .testingMethod("Breath")
                                        .level(20)
                                        .unitType("Millilitres")
                                        .build())
                                .disqualification(new Disqualification.Builder()
                                        .type("DTTP")
                                        .forLife(true)
                                        .months(6)
                                        .build())

                                .sentencingCourtCode("2321")
                                .disqualificationRemovalDate(LocalDate.of(2016, 12, 18))
                                .disqualificationReimposedDate(LocalDate.of(2019, 11, 10))
                                .disqualificationSuspendedPendingAppealDate(LocalDate.of(2020, 4, 5))
                                .otherSentence("A18M")
                                .rehabilitationCourseCompleted(true)
                                .markers(new Markers.Builder()
                                        .declaredHardship(true)
                                        .build())
                                .build(),
                        new Endorsement.Builder()
                                .convictionDate(LocalDate.of(2019, 4, 5))
                                .convictionCourtCode("2345")
                                .appealCourtCode("8549")
                                .fine(BigDecimal.valueOf(5000))
                                .offenceCode("GD18")
                                .offenceLegalLiteral("Mock offence 6")
                                .offenceDate(LocalDate.of(2021, 1, 18))
                                .penaltyPoints(1)
                                .sentenceDate(LocalDate.of(2021, 2, 3))
                                .intoxicant(new Intoxicant.Builder()
                                        .intoxicantType("Amphetamin")
                                        .testingMethod("Breath")
                                        .level(20)
                                        .unitType("Millilitres")
                                        .build())
                                .disqualification(new Disqualification.Builder()
                                        .type("DTTP")
                                        .forLife(true)
                                        .build())
                                .sentencingCourtCode("2321")
                                .disqualificationRemovalDate(LocalDate.of(2021, 1, 18))
                                .disqualificationReimposedDate(LocalDate.of(2021, 1, 20))
                                .disqualificationSuspendedPendingAppealDate(LocalDate.of(2020, 4, 5))
                                .otherSentence("A18M")
                                .rehabilitationCourseCompleted(true)
                                .markers(new Markers.Builder()
                                        .declaredHardship(true)
                                        .build())
                                .build()
                )
                        .collect(Collectors.toList()))
                .licence(new Licence.Builder()
                        .type("full")
                        .build())
                .testPass(Stream.of(
                        new TestPass.Builder()
                                .categoryShortLiteral("A")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("AM")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("B")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("B1")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("F")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("K")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("P")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("Q")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("A")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("BE")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("G")
                                .build()
                ).collect(Collectors.toList()))
                .tokenValidity(new TokenValidity.Builder()
                        .tokenValidToDate(LocalDate.of(2024, 12, 15))
                        .build())
                .build();
    }

    public static DriverResponse getDriverRecordWithNoEndorsment() {
        return new DriverResponse.Builder()
                .driver(new Driver.Builder()
                        .drivingLicenceNumber("NOEND753116SM9IJ")
                        .firstNames("Billy")
                        .lastName("Smith")
                        .gender("male")
                        .dateOfBirth(LocalDate.of(1990, 6, 3))
                        .address(new Address.Builder().unstructuredAddress(new UnstructuredAddress.Builder()
                                .line1("12 London Road")
                                .line2("Twford")
                                .postcode("RG10 9EL").build()).build())
                        .build())
                .endorsements(new ArrayList<Endorsement>())
                .licence(new Licence.Builder()
                        .type("full")
                        .build())
                .testPass(Stream.of(
                        new TestPass.Builder()
                                .categoryShortLiteral("A")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("AM")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("B")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("B1")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("F")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("K")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("P")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("Q")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("A")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("BE")
                                .build(),
                        new TestPass.Builder()
                                .categoryShortLiteral("G")
                                .build()
                ).collect(Collectors.toList()))
                .tokenValidity(new TokenValidity.Builder()
                        .tokenValidToDate(LocalDate.of(2024, 12, 15))
                        .build())
                .build();
    }

    public static DriverResponse getDriverRecordDetails() {
        return new DriverResponse.Builder()
                .driver(new Driver.Builder()
                        .drivingLicenceNumber("EA123432DRIVINGLICENCE")
                        .firstNames("Walter")
                        .lastName("Black")
                        .title("Mr")
                        .nameFormat("Name LastName")
                        .fullModeOfAddress("15 Live Street, Kensington, London, UK ")
                        .gender("male")
                        .dateOfBirth(LocalDate.of(1958, 4, 25))
                        .placeOfBirth("Taiwan")
                        .address(new Address.Builder().unstructuredAddress(new UnstructuredAddress.Builder()
                                .line1("Apartment No 30")
                                .line2("Live Street")
                                .line3("line 3")
                                .line4("London")
                                .line5("UK")
                                .postcode("S15 93U").build()).build())
                        .disqualifiedUntil(LocalDate.of(2021, 10, 30))
                        .disqualifiedForLife(false)
                        .eyesight("excellent eyesight")
                        .imagesExist(true)
                        .disqualifiedPendingSentence(true)
                        .retainedC1_d1Entitlement(true)
                        .previousDrivingLicence(Stream.of(new PreviousDrivingLicence.Builder()
                                .previousDrivingLicenceNumber("DV12341234AU")
                                .previousFirstNames("Jimmy")
                                .previousLastName("Heisenberg").build(), new PreviousDrivingLicence.Builder()
                                .previousDrivingLicenceNumber("CV99999999AA")
                                .previousFirstNames("Matt")
                                .previousLastName("Eye").build())
                                .collect(Collectors.toList()))
                        .build())
                .endorsements(Stream.of(
                        new Endorsement.Builder()
                                .offenceCode("Off code 12")
                                .offenceLegalLiteral("Off leg lit")
                                .offenceDate(LocalDate.of(2020, 10, 20))
                                .sentenceDate(LocalDate.of(2020, 11, 20))
                                .penaltyPoints(20)
                                .fine(BigDecimal.TEN)
                                .disqualification(new Disqualification.Builder()
                                        .type("Type 1")
                                        .forLife(true)
                                        .years(2020)
                                        .months(10)
                                        .days(15)
                                        .build())
                                .expiryDate(LocalDate.of(2022, 11, 20))
                                .appealCourtCode("111")
                                .appealDate(LocalDate.of(2020, 11, 10))
                                .convictionDate(LocalDate.of(2015, 11, 10))
                                .convictionCourtCode("convictionCourtCode1")
                                .disqualification(new Disqualification.Builder()
                                        .type("Type 2")
                                        .forLife(true)
                                        .years(2010)
                                        .months(11)
                                        .days(15)
                                        .build())
                                .disqualificationSuspendedPendingAppealDate(LocalDate.of(2019, 11, 10))
                                .disqualificationReimposedDate(LocalDate.of(2018, 9, 30))
                                .disqualificationRemovalDate(LocalDate.of(2018, 9, 30))
                                .disqualifiedPendingSentence("Disqualified Pending Sentence")
                                .expiryDate(LocalDate.of(2019, 5, 20))
                                .fine(BigDecimal.ONE)
                                .fromDate(LocalDate.of(2017, 9, 30))
                                .identifier("ID 1")
                                .intoxicant(new Intoxicant.Builder()
                                        .intoxicantType("intoxicant Type")
                                        .testingMethod("testing Method")
                                        .level(1)
                                        .unitType("Millilitres")
                                        .build())
                                .markers(new Markers.Builder()
                                        .declaredHardship(true)
                                        .build())
                                .nextReportDate(LocalDate.of(2022, 9, 16))
                                .notificationSource("my notification source")
                                .offenceCode("offence code 1")
                                .offenceLegalLiteral("offence Legal Literal")
                                .offenceDate(LocalDate.of(2014, 9, 16))
                                .otherSentence("other sent")
                                .penaltyPoints(22)
                                .prisonSentenceSuspendedPeriod(new PrisonSentenceSuspendedPeriod.Builder()
                                        .years(2020)
                                        .months(1)
                                        .days(12)
                                        .hours(2200)
                                        .build())
                                .rehabilitationCourseCompleted(true)
                                .sentenceDate(LocalDate.of(2016, 4, 1))
                                .sentencingCourtCode("London Court 1122")
                                .build(),
                        new Endorsement.Builder()
                                .offenceCode("Off code 22")
                                .offenceLegalLiteral("leg lit")
                                .offenceDate(LocalDate.of(2000, 10, 20))
                                .sentenceDate(LocalDate.of(2001, 11, 20))
                                .penaltyPoints(10)
                                .fine(BigDecimal.TEN)
                                .disqualification(new Disqualification.Builder()
                                        .type("Type 22")
                                        .forLife(true)
                                        .years(2000)
                                        .months(15)
                                        .days(15)
                                        .build())
                                .expiryDate(LocalDate.of(2002, 11, 2))
                                .appealCourtCode("111")
                                .appealDate(LocalDate.of(2000, 11, 10))
                                .convictionDate(LocalDate.of(2005, 10, 1))
                                .convictionCourtCode("convictionCourtCode1")
                                .disqualification(new Disqualification.Builder()
                                        .type("Type 2")
                                        .forLife(true)
                                        .years(2001)
                                        .months(1)
                                        .days(15)
                                        .build())
                                .disqualificationSuspendedPendingAppealDate(LocalDate.of(2011, 11, 1))
                                .disqualificationReimposedDate(LocalDate.of(2012, 9, 3))
                                .disqualificationRemovalDate(LocalDate.of(2013, 9, 3))
                                .disqualifiedPendingSentence("Pending")
                                .expiryDate(LocalDate.of(2009, 5, 22))
                                .fine(BigDecimal.ONE)
                                .fromDate(LocalDate.of(2007, 9, 25))
                                .identifier("ID 1")
                                .intoxicant(new Intoxicant.Builder()
                                        .intoxicantType("intoxicant Type 11")
                                        .testingMethod("testing Method 22")
                                        .level(1)
                                        .unitType("Millilitres")
                                        .build())
                                .markers(new Markers.Builder()
                                        .declaredHardship(true)
                                        .build())
                                .nextReportDate(LocalDate.of(2022, 9, 16))
                                .notificationSource("your notification source")
                                .offenceCode("offence 555")
                                .offenceLegalLiteral("Offence Legal Lit")
                                .offenceDate(LocalDate.of(2004, 9, 16))
                                .otherSentence("other sent")
                                .penaltyPoints(22)
                                .prisonSentenceSuspendedPeriod(new PrisonSentenceSuspendedPeriod.Builder()
                                        .years(2010)
                                        .months(1)
                                        .days(10)
                                        .hours(2200)
                                        .build())
                                .rehabilitationCourseCompleted(true)
                                .sentenceDate(LocalDate.of(2006, 4, 1))
                                .sentencingCourtCode("London Court 3322")
                                .build())
                        .collect(Collectors.toList()))
                .entitlement(Stream.of(
                        new Entitlement.Builder()
                                .categoryCode("Category 1")
                                .categoryLegalLiteral("Category Legal Literal 1")
                                .categoryShortLiteral("Category Short Literal 1")
                                .categoryType("Category Type Example")
                                .fromDate(LocalDate.of(2019, 12, 31))
                                .expiryDate(LocalDate.of(2022, 12, 31))
                                .categoryStatus("Status 1")
                                .restrictions(Stream.of(new Restriction.Builder()
                                        .restrictionCode("Code 123")
                                        .restrictionLiteral("Restriction Lit")
                                        .build(), new Restriction.Builder()
                                        .restrictionCode("Code 12")
                                        .restrictionLiteral("Restriction Lit 2")
                                        .build())
                                        .collect(Collectors.toList()))
                                .restrictedToAutomaticTransmission(true)
                                .fromNonGB(false)
                                .build(),
                        new Entitlement.Builder()
                                .categoryCode("Category 2")
                                .categoryLegalLiteral("Category Legal Literal 2")
                                .categoryShortLiteral("Category Short Literal 2")
                                .categoryType("Cat Type Example")
                                .fromDate(LocalDate.of(2010, 12, 31))
                                .expiryDate(LocalDate.of(2025, 12, 31))
                                .categoryStatus("Status 99")
                                .restrictions(Stream.of(new Restriction.Builder()
                                        .restrictionCode("Code 444")
                                        .restrictionLiteral("Rest Lit")
                                        .build(), new Restriction.Builder()
                                        .restrictionCode("Code 999")
                                        .restrictionLiteral("Rest Lit")
                                        .build())
                                        .collect(Collectors.toList()))
                                .restrictedToAutomaticTransmission(true)
                                .fromNonGB(false)
                                .build()
                ).collect(Collectors.toList()))
                .licence(new Licence.Builder()
                        .type("Type B")
                        .status("Active Status")
                        .statusQualifier("Stat Qualifier 1")
                        .countryToWhichExchanged("Korea")
                        .build())
                .testPass(Stream.of(
                        new TestPass.Builder()
                                .type("Yearly")
                                .categoryCode("Cat1")
                                .categoryLegalLiteral("CatLegLiteral1")
                                .categoryShortLiteral("CatShortLiteral1")
                                .testDate(LocalDate.of(2020, 12, 10))
                                .status("Valid")
                                .withAutomaticTransmission(true)
                                .vehicleAdaptations(Stream.of("vehicleAdapt1", "vehicleAdapt2").collect(Collectors.toList()))
                                .withTrailer(true)
                                .extendedTest(true)
                                .licenceSurrendered(false)
                                .testingAuthority("London Test Authority")
                                .build(),
                        new TestPass.Builder()
                                .type("Monthly")
                                .categoryCode("Cat2")
                                .categoryLegalLiteral("CatLegLiteral2")
                                .categoryShortLiteral("CatShortLiteral2")
                                .testDate(LocalDate.of(2020, 11, 10))
                                .status("InValid")
                                .withAutomaticTransmission(false)
                                .vehicleAdaptations(Stream.of("vehicle Adapt 5", "vehicle Adapt 5").collect(Collectors.toList()))
                                .withTrailer(true)
                                .extendedTest(false)
                                .licenceSurrendered(false)
                                .testingAuthority("Manchester Test Authority")
                                .build()
                ).collect(Collectors.toList()))
                .tokenValidity(new TokenValidity.Builder()
                        .tokenValidFromDate(LocalDate.of(2018, 10, 15))
                        .tokenValidToDate(LocalDate.of(2024, 12, 15))
                        .tokenIssueNumber("1234999LL")
                        .build())
                .driverRedirect(true)
                .build();
    }

    public static DriverSummaryResponse oneResultResponse() {
        return new DriverSummaryResponse.Builder()
                .results(Stream.of(
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("VANFL002222OW9PH")
                                .firstNames("David")
                                .lastName("Keller")
                                .dateOfBirth(LocalDate.of(1967, 3, 20))
                                .gender("Male")
                                .postcode("KE 9EL")
                                .driverRedirect(true)
                                .build()).collect(Collectors.toList())).build();
    }

    public static DriverSummaryResponse emptyResultResponse() {
        return new DriverSummaryResponse.Builder()
                .results(null).build();
    }

    public static DriverSummaryResponse multipleResultResponse(final String lastName) {
        return new DriverSummaryResponse.Builder()
                .results(Stream.of(
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("VANFL002222OW9PH")
                                .firstNames("Walter")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1971, 6, 22))
                                .gender("Male")
                                .postcode("KE 9EL")
                                .driverRedirect(true)
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("CFPS9511302EW9MT")
                                .firstNames("Jennifer")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1966, 12, 18))
                                .gender("Female")
                                .postcode("KE 9EL")
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("NTGSD605219QX9DS")
                                .firstNames("Samuel L.")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1964, 11, 11))
                                .gender("Male")
                                .postcode("KE 9EL")
                                .driverRedirect(false)
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("AMRSR601319AF9UD")
                                .firstNames("Walter")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1971, 6, 22))
                                .gender("Male")
                                .postcode("KE 9EL")
                                .driverRedirect(true)
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("EMCSU706060EO9YE")
                                .firstNames("Jennifer")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1966, 12, 18))
                                .gender("Female")
                                .postcode("KE 9EL")
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("GZKXI711051QO9MP")
                                .firstNames("Samuel L.")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1964, 11, 11))
                                .gender("Male")
                                .postcode("KE 9EL")
                                .driverRedirect(false)
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("HVA99559149YW9DF")
                                .firstNames("Walter")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1971, 6, 22))
                                .gender("Male")
                                .postcode("KE 9EL")
                                .driverRedirect(true)
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("EA123422DRIVINGLICENCE")
                                .firstNames("Jennifer")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1966, 12, 18))
                                .gender("Female")
                                .postcode("KE 9EL")
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("HVA99559149YW9DF")
                                .firstNames("Samuel L.")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1964, 11, 11))
                                .gender("Male")
                                .postcode("KE 9EL")
                                .driverRedirect(false)
                                .build())
                        .collect(Collectors.toList()))
                .build();
    }

    public static DriverSummaryResponse getDefaultDriverSummaryResponse(final String lastName, final String postcode) {
        return new DriverSummaryResponse.Builder()
                .results(Stream.of(
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("VANFL002222OW9PH")
                                .firstNames("Walter")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1971, 6, 22))
                                .gender("Male")
                                .postcode(postcode)
                                .driverRedirect(true)
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("CFPS9511302EW9MT")
                                .firstNames("Jennifer")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1966, 12, 18))
                                .gender("Female")
                                .postcode(postcode)
                                .build(),
                        new DriverSummary.Builder()
                                .drivingLicenceNumber("NTGSD605219QX9DS")
                                .firstNames("Samuel L.")
                                .lastName(lastName)
                                .dateOfBirth(LocalDate.of(1964, 11, 11))
                                .gender("Male")
                                .postcode(postcode)
                                .driverRedirect(false)
                                .build())
                        .collect(Collectors.toList()))
                .build();
    }

}
