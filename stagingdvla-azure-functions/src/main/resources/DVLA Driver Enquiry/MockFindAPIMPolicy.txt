<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <send-request mode="new" response-variable-name="dvlaApikeyResponse" timeout="20" ignore-error="false">
            <set-url>{{dvla-apikey-keyvault-url}}</set-url>
            <set-method>GET</set-method>
            <authentication-managed-identity resource="https://vault.azure.net" />
        </send-request>
        <set-variable name="dvlaApikey" value="@{
            var secret = ((IResponse)context.Variables["dvlaApikeyResponse"]).Body.As<JObject>();
            return secret["value"].ToString();
        }" />
        <send-request mode="new" response-variable-name="authResponse" timeout="20" ignore-error="false">
            <set-url>{{dvlaauth-endpoint-base-url}}/v1/mockauthenticate</set-url>
            <set-method>POST</set-method>
        </send-request>
        <set-variable name="idToken" value="@{
            var secret = ((IResponse)context.Variables["authResponse"]).Body.As<JObject>();
            return secret["id-token"].ToString();
        }" />
        <send-request mode="new" response-variable-name="dvlaDATA" timeout="30" ignore-error="false">
            <set-url>{{dvlaenquiry-endpoint-base-url}}/v1/find</set-url>
            <set-method>POST</set-method>
            <set-header name="Authorization" exists-action="override">
                <value>@((string)(context.Variables["idToken"]))</value>
            </set-header>
            <set-header name="x-api-key" exists-action="override">
                <value>@((string)(context.Variables["dvlaApikey"]))</value>
            </set-header>
            <set-header name="limit" exists-action="override">
                <value>20</value>
            </set-header>
            <set-header name="offset" exists-action="override">
                <value>0</value>
            </set-header>
        </send-request>
        <return-response>
            <set-status code="200" reason="OK" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@("{\"success\": true, \"dvlaDATA\": " + ((IResponse)context.Variables["dvlaDATA"]).Body.As<string>() + "}")</set-body>
        </return-response>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>